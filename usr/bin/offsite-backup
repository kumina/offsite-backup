#!/bin/sh
#
# Daily offsite backups.
#
# Bart Cortooms <bart@kumina.nl>, Kumina, 2005-2008.
# Tim Stoop <tim@kumina.nl>, Kumina, 2010-2012
#

# Default configuration settings
VERBOSITY=1
BACKUP_USER=backup
BACKUP_DIR=/var/backups/$(hostname -f)
LOG=/var/log/offsite-backup.log
PREPARE=/etc/backup/prepare.d
INCLUDE_PATTERNS=/etc/backup/includes
EXCLUDE_PATTERNS=/etc/backup/excludes
SSH_PRIVATE_KEY=/etc/backup/ssh_key
REMOVE_OLDER_THAN=60B
SPLAY=0

# Initialize
cleanup=0
repair=0
list=0
enable_splay=0
config=/etc/backup/offsite-backup.conf
listfile=/tmp/backuplist

usage ()
{
	echo "Usage: offsite-backup [--force] [--enable-splay] [--config /absolute/path/to/config.conf]"
	echo "       offsite-backup cleanup [--enable-splay] [--config /absolute/path/to/config.conf]"
	echo "       offsite-backup repair [--config /absolute/path/to/config.conf]"
	echo "       offsite-backup list [--with-sizes] [--config /absolute/path/to/config.conf]"
}

# Get command line options
if [ "$1" = "cleanup" ]; then
	shift
	cleanup=1
elif [ "$1" = "repair" ]; then
        shift
	repair=1
elif [ "$1" = "list" ]; then
        shift
	list=1
fi

args=$(getopt -u -n offsite-backup -o hfsc: -l help,force,enable-splay,with-sizes,config: -- $*)

if [ $? != 0 ]; then
	echo
	usage
	exit 2
fi

set -- $args

for a; do
        case "$a" in
                -h|--help)
			usage
                        exit 1;;
                -s|--enable-splay)
			enable_splay=1
                        shift;;
		-f|--force)
                        extra_opts="--force"
                        shift;;
		--with-sizes)
			extra_opts="--list-increment-sizes"
			shift;;
		-c|--config)
			config="$2"
			shift 2;;
                --)
                        shift; break;;
        esac
done

# Read the configuration
if [ ! -f "$config" ]; then
	echo $0: ERROR: config file $config does not exist >&2
	exit 1
fi
. $config

alias rdiff-backup="rdiff-backup --terminal-verbosity $VERBOSITY \
   --remote-schema 'ssh -i $SSH_PRIVATE_KEY -C \%s rdiff-backup --server'"
destination="$BACKUP_USER@$BACKUP_SERVER::$BACKUP_DIR"

# Remove increments older than $REMOVE_OLDER_THAN.
cleanup ()
{
	echo "\n[$(date)] Removing backups older than $REMOVE_OLDER_THAN" >> "$LOG"
	extra_opts="$1"
	if [ -n "$REMOVE_OLDER_THAN" ]; then
		rdiff-backup $extra_opts --remove-older-than "$REMOVE_OLDER_THAN" \
		              "$destination" 2>&1 | tee -a "$LOG"
	fi
}

# If the last backup was interrupted, repair will remove it.
repair ()
{
	rdiff-backup --force --check-destination-dir "$destination" 2>&1 | tee -a "$LOG"
}

# List all increments
list ()
{
	if [ ! -e "$listfile" ]; then create_list; fi
	cat $listfile
}

# Create the listfile
create_list()
{
	if [ -w "$listfile" ] || [ ! -e "$listfile" ]; then
		echo "[$(date)] Getting new list info" >> "$LOG"
		rdiff-backup --list-increments $extra_opts "$destination" > $listfile
	else
		echo "Cannot write to $listfile, but update was requested. Continuing without update." | tee -a "$LOG"
	fi
}

if [ $enable_splay -eq 1 ] && [ $SPLAY -ne 0 ]; then
	if [ ! -f /usr/bin/hexdump ]; then
		echo "The application hexdump is needed for splay. Continuing without splay."
	fi
	# Sleep for a random amount of seconds, but no longer than $SPLAY seconds.
	random=`/usr/bin/hexdump -n 2 -e '/2 "%u"' /dev/urandom`
	sleeptime=$((random%$SPLAY))
	echo "[$(date)] Sleeping for $sleeptime seconds" >> "$LOG"
	sleep $sleeptime
fi

if [ $cleanup -eq 1 ]; then
	cleanup --force; exit
elif [ $repair -eq 1 ]; then
	repair; exit
elif [ $list -eq 1 ]; then
	list; exit
fi

echo "\n[$(date)] Starting backup" >> "$LOG"

# Execute the backup prepare scripts.
echo "[$(date)] Running backup prepare scripts" >> "$LOG"
test -d "$PREPARE" && run-parts -u 077 "$PREPARE"

echo "[$(date)] Starting rdiff-backup process to perform the backup" >> "$LOG"
rdiff-backup $extra_opts \
             --exclude-device-files \
             --exclude "$LOG" \
             --exclude-globbing-filelist "$EXCLUDE_PATTERNS" \
             --include-globbing-filelist "$INCLUDE_PATTERNS" \
             --exclude '**' / "$destination" 2>&1 | tee -a "$LOG"

cleanup
create_list

# Execute the backup finish scripts.
echo "[$(date)] Running backup finish scripts" >> "$LOG"
test -d "$FINISH" && run-parts -u 077 "$FINISH"

echo "\n[$(date)] Finished backup" >> "$LOG"
